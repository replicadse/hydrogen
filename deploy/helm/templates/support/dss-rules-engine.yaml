{{- if .Values.apps.support.dummysetup.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dss-rules-engine
spec:
  selector:
    matchLabels:
      app: dss-rules-engine
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: dss-rules-engine
    spec:
      containers:
        - name: dss-rules-engine
          image: python:3.10-buster
          imagePullPolicy: IfNotPresent
          command: ["python", "/app/code/code.py"]
          volumeMounts:
            - mountPath: "/app/code"
              name: code
              readOnly: true
          ports:
            - containerPort: 8080
      volumes:
        - name: code
          configMap:
            name: dss-rules-engine-code
            optional: false
            items:
              - key: code
                path: code.py
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dss-rules-engine-code
data:
  code: |-
    # Python 3 server example
    from http.server import BaseHTTPRequestHandler, HTTPServer
    from json import JSONDecoder, JSONEncoder

    hostName = "0.0.0.0"
    serverPort = 8080

    class Server(BaseHTTPRequestHandler):
        def do_POST(self):
            if self.headers.get('Authorization') != 'dss-rules-engine-key':
                self.send_response(500)
                self.end_headers()
                return

            body = JSONDecoder().decode(self.rfile.read(int(self.headers['Content-Length'])).decode('UTF-8'))
            print(body, flush=True)
            self.send_response(200)
            self.send_header("Content-type", "text/plain")
            self.end_headers()
            body = {
                "endpoint": "http://dss-sink-a:8080",
                "headers": {
                    "Authorization": "dss-sink-a-key"
                }
            }
            self.wfile.write(bytes(JSONEncoder().encode(body), "utf-8"))

    if __name__ == "__main__":
        webServer = HTTPServer((hostName, serverPort), Server)
        print("Server started http://%s:%s" % (hostName, serverPort), flush=True)

        try:
            webServer.serve_forever()
        except KeyboardInterrupt:
            pass

        webServer.server_close()
        print("Server stopped.", flush=True)
---
apiVersion: v1
kind: Service
metadata:
  name: dss-rules-engine
spec:
  type: ClusterIP
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: dss-rules-engine
{{ end }}